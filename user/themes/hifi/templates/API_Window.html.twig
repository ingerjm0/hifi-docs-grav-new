      {% extends 'partials/base_noGit.html.twig' %}
      {% set tags = page.taxonomy.tag %}
      {% if tags %}
          {% set progress = page.collection({'items':{'@taxonomy':{'category': 'docs', 'tag': tags}},'order': {'by': 'default', 'dir': 'asc'}}) %}
      {% else %}
          {% set progress = page.collection({'items':{'@taxonomy':{'category': 'docs'}},'order': {'by': 'default', 'dir': 'asc'}}) %}
      {% endif %}
      
      {% block navigation %}
          <div id="navigation">
          {% if not progress.isFirst(page.path) %}
              <a class="nav nav-prev" href="{{ progress.nextSibling(page.path).url }}"> <img src="{{ url('theme://images/left-arrow.png') }}"></a>
          {% endif %}
      
          {% if not progress.isLast(page.path) %}
              <a class="nav nav-next" href="{{ progress.prevSibling(page.path).url }}"><img src="{{ url('theme://images/right-arrow.png') }}"></a>
          {% endif %}
          </div>
      {% endblock %}
      
      {% block content %}
          <div id="api-specific">
              <div id="body-inner">
                  <h1>{{ page.title }}</h1>
                  <section>
<article>
  <div class="container-overview">
    <div class="description">
      <table>
        <tbody>
          <tr>
            <th>Available in:</th>
            <td>Interface Scripts</td>
            <td>Client Entity Scripts</td>
          </tr>
        </tbody>
      </table><br>The Window API provides various facilities not covered elsewhere: window dimensions, window focus, normal or entity camera view, clipboard, announcements, user connections, common dialog boxes, snapshots, file import, domain changes, domain physics.
    </div>
    <div>
      <h5>Methods</h5>
    </div>
    <div><a href="#.alert">alert</a></div>
    <div><a href="#.browse">browse</a></div>
    <div><a href="#.browseAssets">browseAssets</a></div>
    <div><a href="#.browseAssetsAsync">browseAssetsAsync</a></div>
    <div><a href="#.browseAsync">browseAsync</a></div>
    <div><a href="#.browseDir">browseDir</a></div>
    <div><a href="#.browseDirAsync">browseDirAsync</a></div>
    <div><a href="#.checkVersion">checkVersion</a></div>
    <div><a href="#.closeMessageBox">closeMessageBox</a></div>
    <div><a href="#.confirm">confirm</a></div>
    <div><a href="#.copyToClipboard">copyToClipboard</a></div>
    <div><a href="#.displayAnnouncement">displayAnnouncement</a></div>
    <div><a href="#.getDeviceSize">getDeviceSize</a></div>
    <div><a href="#.getLastDomainConnectionError">getLastDomainConnectionError</a></div>
    <div><a href="#.hasFocus">hasFocus</a></div>
    <div><a href="#.hasRift">hasRift</a></div>
    <div><a href="#.hasRift">hasRift</a></div>
    <div><a href="#.isPhysicsEnabled">isPhysicsEnabled</a></div>
    <div><a href="#.isPointOnDesktopWindow">isPointOnDesktopWindow</a></div>
    <div><a href="#.makeConnection">makeConnection</a></div>
    <div><a href="#.openAndroidActivity">openAndroidActivity</a></div>
    <div><a href="#.openMessageBox">openMessageBox</a></div>
    <div><a href="#.openUrl">openUrl</a></div>
    <div><a href="#.prompt">prompt</a></div>
    <div><a href="#.promptAsync">promptAsync</a></div>
    <div><a href="#.protocolSignature">protocolSignature</a></div>
    <div><a href="#.raise">raise</a></div>
    <div><a href="#.save">save</a></div>
    <div><a href="#.saveAsync">saveAsync</a></div>
    <div><a href="#.setDisplayTexture">setDisplayTexture</a></div>
    <div><a href="#.setFocus">setFocus</a></div>
    <div><a href="#.shareSnapshot">shareSnapshot</a></div>
    <div><a href="#.showAssetServer">showAssetServer</a></div>
    <div><a href="#.takeSecondaryCamera360Snapshot">takeSecondaryCamera360Snapshot</a></div>
    <div><a href="#.takeSecondaryCameraSnapshot">takeSecondaryCameraSnapshot</a></div>
    <div><a href="#.takeSnapshot">takeSnapshot</a></div>
    <div><a href="#.updateMessageBox">updateMessageBox</a></div><br>
    <div>
      <h5>Signals</h5>
    </div>
    <div><a href="#.announcement">announcement</a></div>
    <div><a href="#.assetsDirChanged">assetsDirChanged</a></div>
    <div><a href="#.browseChanged">browseChanged</a></div>
    <div><a href="#.browseDirChanged">browseDirChanged</a></div>
    <div><a href="#.connectionAdded">connectionAdded</a></div>
    <div><a href="#.connectionError">connectionError</a></div>
    <div><a href="#.domainChanged">domainChanged</a></div>
    <div><a href="#.domainConnectionRefused">domainConnectionRefused</a></div>
    <div><a href="#.geometryChanged">geometryChanged</a></div>
    <div><a href="#.interstitialModeChanged">interstitialModeChanged</a></div>
    <div><a href="#.messageBoxClosed">messageBoxClosed</a></div>
    <div><a href="#.processingGifCompleted">processingGifCompleted</a></div>
    <div><a href="#.processingGifStarted">processingGifStarted</a></div>
    <div><a href="#.promptTextChanged">promptTextChanged</a></div>
    <div><a href="#.redirectErrorStateChanged">redirectErrorStateChanged</a></div>
    <div><a href="#.saveFileChanged">saveFileChanged</a></div>
    <div><a href="#.snapshot360Taken">snapshot360Taken</a></div>
    <div><a href="#.snapshotShared">snapshotShared</a></div>
    <div><a href="#.stillSnapshotTaken">stillSnapshotTaken</a></div>
    <div><a href="#.svoImportRequested">svoImportRequested</a></div><br>
    <div>
      <h5>Type Definitions</h5>
    </div>
    <div><a href="#.ConnectionRefusedReason">ConnectionRefusedReason</a></div>
    <div><a href="#.DisplayTexture">DisplayTexture</a></div>
    <div><a href="#.MessageBoxButton">MessageBoxButton</a></div><br>
    <h5 class="subsection-title">Properties:</h5>
    <table class="props">
      <thead>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th>Default</th>
          <th class="last">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td class="name"><code>innerWidth</code></td>
          <td class="type"> <span class="param-type">number</span></td>
          <td class="default"></td>
          <td class="description last">The width of the drawable area of the Interface window (i.e., without borders or other chrome), in pixels. <em>Read-only.</em></td>
        </tr>
        <tr>
          <td class="name"><code>innerHeight</code></td>
          <td class="type"> <span class="param-type">number</span></td>
          <td class="default"></td>
          <td class="description last">The height of the drawable area of the Interface window (i.e., without borders or other chrome), in pixels. <em>Read-only.</em></td>
        </tr>
        <tr>
          <td class="name"><code>location</code></td>
          <td class="type"> <span class="param-type">object</span></td>
          <td class="default"></td>
          <td class="description last">Provides facilities for working with your current metaverse location. See <a href="/api-reference/namespaces/location">location</a>.</td>
        </tr>
        <tr>
          <td class="name"><code>x</code></td>
          <td class="type"> <span class="param-type">number</span></td>
          <td class="default"></td>
          <td class="description last">The x display coordinate of the top left corner of the drawable area of the Interface window. <em>Read-only.</em></td>
        </tr>
        <tr>
          <td class="name"><code>y</code></td>
          <td class="type"> <span class="param-type">number</span></td>
          <td class="default"></td>
          <td class="description last">The y display coordinate of the top left corner of the drawable area of the Interface window. <em>Read-only.</em></td>
        </tr>
        <tr>
          <td class="name"><code>interstitialModeEnabled</code></td>
          <td class="type"> <span class="param-type">boolean</span></td>
          <td class="default"> true</td>
          <td class="description last"><code>true</code> if the interstitial graphics are displayed when the domain is loading, otherwise <code>false</code>.</td>
        </tr>
      </tbody>
    </table>
  </div>
  <h4 class="subsection-title">Methods</h4>
  <h5 class="name" id=".alert"> alert<span class="signature">(message<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Display a dialog with the specified message and an &quot;OK&quot; button. The dialog is non-modal; the script continues without waiting for a user response.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The message to display.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Display a friendly greeting.</p><pre><code>Window.alert(&quot;Welcome!&quot;);
print(&quot;Script continues without waiting&quot;);</code></pre>
  <h5 class="name" id=".browse"> browse<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>, nameFilter<span class="signature-attributes">opt</span>)</span> <span class="type-signature">&#x2192; {string}</span></h5>
  <div class="description"> Prompt the user to choose a file. Displays a modal dialog that navigates the directory tree.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
      <tr>
        <td class="name"><code>nameFilter</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The types of files to display. Examples: <code>&quot;*.json&quot;</code> and <code>&quot;Images (*.png *.jpg *.svg)&quot;</code>. All files are displayed if a filter isn&apos;t specified.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The path and name of the file if one is chosen, otherwise <code>null</code>.</div>
  <dl><dt> Type: string</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Ask the user to choose an image file.</p><pre><code>var filename = Window.browse(&quot;Select Image File&quot;, Paths.resources, &quot;Images (*.png *.jpg *.svg)&quot;);
print(&quot;File: &quot; + filename);</code></pre>
  <h5 class="name" id=".browseAssets"> browseAssets<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>, nameFilter<span class="signature-attributes">opt</span>)</span> <span class="type-signature">&#x2192; {string}</span></h5>
  <div class="description"> Prompt the user to choose an Asset Server item. Displays a modal dialog that navigates the tree of assets on the Asset Server.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
      <tr>
        <td class="name"><code>nameFilter</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The types of files to display. Examples: <code>&quot;*.json&quot;</code> and <code>&quot;Images (*.png *.jpg *.svg)&quot;</code>. All files are displayed if a filter isn&apos;t specified.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The path and name of the asset if one is chosen, otherwise <code>null</code>.</div>
  <dl><dt> Type: string</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Ask the user to select an FBX asset.</p><pre><code>var asset = Window.browseAssets(&quot;Select FBX File&quot;, &quot;/&quot;, &quot;*.fbx&quot;);
print(&quot;FBX file: &quot; + asset);</code></pre>
  <h5 class="name" id=".browseAssetsAsync"> browseAssetsAsync<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>, nameFilter<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Prompt the user to choose an Asset Server item. Displays a non-modal dialog that navigates the tree of assets on the Asset Server. A <a href="/api-reference/namespaces/window#.assetsDirChanged">assetsDirChanged</a> signal is emitted when an asset is chosen; no signal is emitted if the user cancels the dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
      <tr>
        <td class="name"><code>nameFilter</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The types of files to display. Examples: <code>&quot;*.json&quot;</code> and <code>&quot;Images (*.png *.jpg *.svg)&quot;</code>. All files are displayed if a filter isn&apos;t specified.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5><pre><code>function onAssetsDirChanged(asset) {
  print(&quot;FBX file: &quot; + asset);
}
Window.assetsDirChanged.connect(onAssetsDirChanged);

Window.browseAssetsAsync(&quot;Select FBX File&quot;, &quot;/&quot;, &quot;*.fbx&quot;);
print(&quot;Script continues without waiting&quot;);</code></pre>
  <h5 class="name" id=".browseAsync"> browseAsync<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>, nameFilter<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Prompt the user to choose a file. Displays a non-modal dialog that navigates the directory tree. A <a href="/api-reference/namespaces/window#.browseChanged">browseChanged</a> signal is emitted when a file is chosen; no signal is emitted if the user cancels the dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
      <tr>
        <td class="name"><code>nameFilter</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The types of files to display. Examples: <code>&quot;*.json&quot;</code> and <code>&quot;Images (*.png *.jpg *.svg)&quot;</code>. All files are displayed if a filter isn&apos;t specified.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Ask the user to choose an image file without waiting for the answer.</p><pre><code>function onBrowseChanged(filename) {
  print(&quot;File: &quot; + filename);
}
Window.browseChanged.connect(onBrowseChanged);

Window.browseAsync(&quot;Select Image File&quot;, Paths.resources, &quot;Images (*.png *.jpg *.svg)&quot;);
print(&quot;Script continues without waiting&quot;);</code></pre>
  <h5 class="name" id=".browseDir"> browseDir<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>)</span> <span class="type-signature">&#x2192; {string}</span></h5>
  <div class="description"> Prompt the user to choose a directory. Displays a modal dialog that navigates the directory tree.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The path of the directory if one is chosen, otherwise <code>null</code>.</div>
  <dl><dt> Type: string</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Ask the user to choose a directory.</p><pre><code>var directory = Window.browseDir(&quot;Select Directory&quot;, Paths.resources);
print(&quot;Directory: &quot; + directory);</code></pre>
  <h5 class="name" id=".browseDirAsync"> browseDirAsync<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Prompt the user to choose a directory. Displays a non-modal dialog that navigates the directory tree. A <a href="/api-reference/namespaces/window#.browseDirChanged">browseDirChanged</a> signal is emitted when a directory is chosen; no signal is emitted if the user cancels the dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Ask the user to choose a directory without waiting for the answer.</p><pre><code>function onBrowseDirChanged(directory) {
  print(&quot;Directory: &quot; + directory);
}
Window.browseDirChanged.connect(onBrowseDirChanged);

Window.browseDirAsync(&quot;Select Directory&quot;, Paths.resources);
print(&quot;Script continues without waiting&quot;);</code></pre>
  <h5 class="name" id=".checkVersion"> checkVersion<span class="signature">()</span> <span class="type-signature">&#x2192; {string}</span></h5>
  <div class="description"> Get Interface&apos;s build number.</div>
  <h6>Returns:</h6>
  <div class="param-desc"> Interface&apos;s build number.</div>
  <dl><dt> Type: string</dt></dl>
  <h5 class="name" id=".closeMessageBox"> closeMessageBox<span class="signature">(id)</span><span class="type-signature"></span></h5>
  <div class="description"> Close a message box that was opened with <a href="/api-reference/namespaces/window#.openMessageBox">openMessageBox</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>id</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The ID of the message box.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".confirm"> confirm<span class="signature">(message<span class="signature-attributes">opt</span>)</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Prompt the user to confirm something. Displays a modal dialog with a message plus &quot;Yes&quot; and &quot;No&quot; buttons. responds.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The question to display.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if the user selects &quot;Yes&quot;, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Ask the user a question requiring a yes/no answer.</p><pre><code>var answer = Window.confirm(&quot;Are you sure?&quot;);
print(answer);  // true or false</code></pre>
  <h5 class="name" id=".copyToClipboard"> copyToClipboard<span class="signature">(text)</span><span class="type-signature"></span></h5>
  <div class="description"> Copies text to the operating system&apos;s clipboard.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>text</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The text to copy to the operating system&apos;s clipboard.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".displayAnnouncement"> displayAnnouncement<span class="signature">(message)</span><span class="type-signature"></span></h5>
  <div class="description"> Display a notification message. Notifications are displayed in panels by the default script, nofications.js. An <a href="/api-reference/namespaces/window#.announcement">announcement</a> signal is emitted when this function is called.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The announcement message.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Send and capture an announcement message.</p><pre><code>function onAnnouncement(message) {
  // The message is also displayed as a notification by notifications.js.
  print(&quot;Announcement: &quot; + message);
}
Window.announcement.connect(onAnnouncement);

Window.displayAnnouncement(&quot;Hello&quot;);</code></pre>
  <h5 class="name" id=".getDeviceSize"> getDeviceSize<span class="signature">()</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Vec2">Vec2</a>}</span></h5>
  <div class="description"> Get the size of the drawable area of the Interface window if in desktop mode or the HMD rendering surface if in HMD mode.</div>
  <h6>Returns:</h6>
  <div class="param-desc"> The width and height of the Interface window or HMD rendering surface, in pixels.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Vec2">Vec2</a></dt></dl>
  <h5 class="name" id=".getLastDomainConnectionError"> getLastDomainConnectionError<span class="signature">()</span> <span class="type-signature">&#x2192; {<a href="/api-reference/namespaces/window#.ConnectionRefusedReason">Window.ConnectionRefusedReason</a>}</span></h5>
  <div class="description"> Gets the last domain connection error when a connection is refused.</div>
  <h6>Returns:</h6>
  <div class="param-desc"> Integer number that enumerates the last domain connection refused.</div>
  <dl><dt> Type: <a href="/api-reference/namespaces/window#.ConnectionRefusedReason">Window.ConnectionRefusedReason</a></dt></dl>
  <h5 class="name" id=".hasFocus"> hasFocus<span class="signature">()</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Check if the Interface window has focus.</div>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if the Interface window has focus, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5 class="name" id=".hasRift"> hasRift<span class="signature">()</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Returns true if Oculus Rift is connected (looks for hand controllers)</div>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if running on Windows, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5 class="name" id=".hasRift"> hasRift<span class="signature">()</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Returns true if HTC Vive is connected (looks for hand controllers)</div>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if running on Windows, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5 class="name" id=".isPhysicsEnabled"> isPhysicsEnabled<span class="signature">()</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Check to see if physics is active for you in the domain you&apos;re visiting - there is a delay between your arrival at a domain and physics becoming active for you in that domain.</div>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if physics is currently active for you, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Wait for physics to be enabled when you change domains.</p><pre><code>function checkForPhysics() {
  var isPhysicsEnabled = Window.isPhysicsEnabled();
  print(&quot;Physics enabled: &quot; + isPhysicsEnabled);
  if (!isPhysicsEnabled) {
      Script.setTimeout(checkForPhysics, 1000);
  }
}

function onDomainChanged(domain) {
  print(&quot;Domain changed: &quot; + domain);
  Script.setTimeout(checkForPhysics, 1000);
}

Window.domainChanged.connect(onDomainChanged);</code></pre>
  <h5 class="name" id=".isPointOnDesktopWindow"> isPointOnDesktopWindow<span class="signature">(point)</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Check if a 2D point is within the desktop window if in desktop mode, or the drawable area of the HUD overlay if in HMD mode.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>point</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec2">Vec2</a></span></td>
        <td class="description last">The point to check.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if the point is within the window or HUD, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5 class="name" id=".makeConnection"> makeConnection<span class="signature">(success, description)</span><span class="type-signature"></span></h5>
  <div class="description"> Emit a <a href="/api-reference/namespaces/window#.connectionAdded">connectionAdded</a> or a <a href="/api-reference/namespaces/window#.connectionError">connectionError</a> signal that indicates whether or not a user connection was successfully made using the Web API.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>success</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="description last">If <code>true</code> then <a href="/api-reference/namespaces/window#.connectionAdded">connectionAdded</a> is emitted, otherwise <a href="/api-reference/namespaces/window#.connectionError">connectionError</a> is emitted.</td>
      </tr>
      <tr>
        <td class="name"><code>description</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">Descriptive text about the connection success or error. This is sent in the signal emitted.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".openAndroidActivity"> openAndroidActivity<span class="signature">(activityName, backToScene)</span><span class="type-signature"></span></h5>
  <div class="description"> Open an Android activity and optionally return back to the scene when the activity is completed. <em>Android only.</em></div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>activityName</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The name of the activity to open: one of <code>&quot;Home&quot;</code>, <code>&quot;Login&quot;</code>, or <code>&quot;Privacy Policy&quot;</code>.</td>
      </tr>
      <tr>
        <td class="name"><code>backToScene</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="description last">If <code>true</code>, the user is automatically returned back to the scene when the activity is completed.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".openMessageBox"> openMessageBox<span class="signature">(title, text, buttons, defaultButton)</span> <span class="type-signature">&#x2192; {number}</span></h5>
  <div class="description"> Open a non-modal message box that can have a variety of button combinations. See also, <a href="/api-reference/namespaces/window#.updateMessageBox">updateMessageBox</a> and <a href="/api-reference/namespaces/window#.closeMessageBox">closeMessageBox</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The title to display for the message box.</td>
      </tr>
      <tr>
        <td class="name"><code>text</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">Text to display in the message box.</td>
      </tr>
      <tr>
        <td class="name"><code>buttons</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/namespaces/window#.MessageBoxButton">Window.MessageBoxButton</a></span></td>
        <td class="description last">The buttons to display on the message box; one or more button values added together.</td>
      </tr>
      <tr>
        <td class="name"><code>defaultButton</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/namespaces/window#.MessageBoxButton">Window.MessageBoxButton</a></span></td>
        <td class="description last">The button that has focus when the message box is opened.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The ID of the message box created.</div>
  <dl><dt> Type: number</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Ask the user whether that want to reset something.</p><pre><code>var messageBox;
var resetButton = 0x4000000;
var cancelButton = 0x400000;

function onMessageBoxClosed(id, button) {
  if (id === messageBox) {
      if (button === resetButton) {
          print(&quot;Reset&quot;);
      } else {
          print(&quot;Don&apos;t reset&quot;);
      }
  }
}
Window.messageBoxClosed.connect(onMessageBoxClosed);

messageBox = Window.openMessageBox(&quot;Reset Something&quot;, 
  &quot;Do you want to reset something?&quot;,
  resetButton + cancelButton, cancelButton);</code></pre>
  <h5 class="name" id=".openUrl"> openUrl<span class="signature">(url)</span><span class="type-signature"></span></h5>
  <div class="description"> Open a URL in the Interface window or other application, depending on the URL&apos;s scheme. If the URL starts with <code>hifi://</code> then that URL is navigated to in Interface, otherwise the URL is opened in the application the OS associates with the URL&apos;s scheme (e.g., a Web browser for <code>http://</code>).</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>url</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The URL to open.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".prompt"> prompt<span class="signature">(message, defaultText)</span> <span class="type-signature">&#x2192; {string}</span></h5>
  <div class="description"> Prompt the user to enter some text. Displays a modal dialog with a message and a text box, plus &quot;OK&quot; and &quot;Cancel&quot; buttons.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The question to display.</td>
      </tr>
      <tr>
        <td class="name"><code>defaultText</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The default answer text.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The text that the user entered if they select &quot;OK&quot;, otherwise &quot;&quot;.</div>
  <dl><dt> Type: string</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Ask the user a question requiring a text answer.</p><pre><code>var answer = Window.prompt(&quot;Question&quot;, &quot;answer&quot;);
if (answer === &quot;&quot;) {
  print(&quot;User canceled&quot;);
} else {
  print(&quot;User answer: &quot; + answer);
}</code></pre>
  <h5 class="name" id=".promptAsync"> promptAsync<span class="signature">(message<span class="signature-attributes">opt</span>, defaultText<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Prompt the user to enter some text. Displays a non-modal dialog with a message and a text box, plus &quot;OK&quot; and &quot;Cancel&quot; buttons. A <a href="/api-reference/namespaces/window#.promptTextChanged">promptTextChanged</a> signal is emitted when the user OKs the dialog; no signal is emitted if the user cancels the dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The question to display.</td>
      </tr>
      <tr>
        <td class="name"><code>defaultText</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The default answer text.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Ask the user a question requiring a text answer without waiting for the answer.</p><pre><code>function onPromptTextChanged(text) {
  print(&quot;User answer: &quot; + text);
}
Window.promptTextChanged.connect(onPromptTextChanged);

Window.promptAsync(&quot;Question&quot;, &quot;answer&quot;);
print(&quot;Script continues without waiting&quot;);</code></pre>
  <h5 class="name" id=".protocolSignature"> protocolSignature<span class="signature">()</span> <span class="type-signature">&#x2192; {string}</span></h5>
  <div class="description"> Get the signature for Interface&apos;s protocol version.</div>
  <h6>Returns:</h6>
  <div class="param-desc"> A string uniquely identifying the version of the metaverse protocol that Interface is using.</div>
  <dl><dt> Type: string</dt></dl>
  <h5 class="name" id=".raise"> raise<span class="signature">()</span><span class="type-signature"></span></h5>
  <div class="description"> Raise the Interface window if it is minimized. If raised, the window gains focus.</div>
  <h5 class="name" id=".save"> save<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>, nameFilter<span class="signature-attributes">opt</span>)</span> <span class="type-signature">&#x2192; {string}</span></h5>
  <div class="description"> Prompt the user to specify the path and name of a file to save to. Displays a model dialog that navigates the directory tree and allows the user to type in a file name.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
      <tr>
        <td class="name"><code>nameFilter</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The types of files to display. Examples: <code>&quot;*.json&quot;</code> and <code>&quot;Images (*.png *.jpg *.svg)&quot;</code>. All files are displayed if a filter isn&apos;t specified.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The path and name of the file if one is specified, otherwise <code>null</code>. If a single file type is specified in the nameFilter, that file type extension is automatically appended to the result when appropriate.</div>
  <dl><dt> Type: string</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Ask the user to specify a file to save to.</p><pre><code>var filename = Window.save(&quot;Save to JSON file&quot;, Paths.resources, &quot;*.json&quot;);
print(&quot;File: &quot; + filename);</code></pre>
  <h5 class="name" id=".saveAsync"> saveAsync<span class="signature">(title<span class="signature-attributes">opt</span>, directory<span class="signature-attributes">opt</span>, nameFilter<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Prompt the user to specify the path and name of a file to save to. Displays a non-model dialog that navigates the directory tree and allows the user to type in a file name. A <a href="/api-reference/namespaces/window#.saveFileChanged">saveFileChanged</a> signal is emitted when a file is specified; no signal is emitted if the user cancels the dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The title to display at the top of the dialog.</td>
      </tr>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The initial directory to start browsing at.</td>
      </tr>
      <tr>
        <td class="name"><code>nameFilter</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The types of files to display. Examples: <code>&quot;*.json&quot;</code> and <code>&quot;Images (*.png *.jpg *.svg)&quot;</code>. All files are displayed if a filter isn&apos;t specified.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Ask the user to specify a file to save to without waiting for an answer.</p><pre><code>function onSaveFileChanged(filename) {
  print(&quot;File: &quot; + filename);
}
Window.saveFileChanged.connect(onSaveFileChanged);

Window.saveAsync(&quot;Save to JSON file&quot;, Paths.resources, &quot;*.json&quot;);
print(&quot;Script continues without waiting&quot;);</code></pre>
  <h5 class="name" id=".setDisplayTexture"> setDisplayTexture<span class="signature">(texture)</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Set what to show on the PC display: normal view or entity camera view. The entity camera is configured using <a href="/api-reference/namespaces/camera#.setCameraEntity">Camera.setCameraEntity</a> and <a href="/api-reference/namespaces/camera">Camera.mode</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>texture</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/namespaces/window#.DisplayTexture">Window.DisplayTexture</a></span></td>
        <td class="description last">The view to display.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if the display texture was successfully set, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5 class="name" id=".setFocus"> setFocus<span class="signature">()</span><span class="type-signature"></span></h5>
  <div class="description"> Make the Interface window have focus. On Windows, if Interface doesn&apos;t already have focus, the task bar icon flashes to indicate that Interface wants attention but focus isn&apos;t taken away from the application that the user is using.</div>
  <h5 class="name" id=".shareSnapshot"> shareSnapshot<span class="signature">(path, href<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Prepare a snapshot ready for sharing. A <a href="/api-reference/namespaces/window#.snapshotShared">snapshotShared</a> signal is emitted when the snapshot has been prepared.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>path</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"></td>
        <td class="default"></td>
        <td class="description last">The path and name of the image file to share.</td>
      </tr>
      <tr>
        <td class="name"><code>href</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The metaverse location where the snapshot was taken.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".showAssetServer"> showAssetServer<span class="signature">(uploadFile<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Open the Asset Browser dialog. If a file to upload is specified, the user is prompted to enter the folder and name to map the file to on the asset server.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>uploadFile</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">The path and name of a file to upload to the asset server.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Upload a file to the asset server.</p><pre><code>var filename = Window.browse(&quot;Select File to Add to Asset Server&quot;, Paths.resources);
print(&quot;File: &quot; + filename);
Window.showAssetServer(filename);</code></pre>
  <h5 class="name" id=".takeSecondaryCamera360Snapshot"> takeSecondaryCamera360Snapshot<span class="signature">(cameraPosition, cubemapOutputFormat<span class="signature-attributes">opt</span>, notify<span class="signature-attributes">opt</span>, filename<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Takes a 360&#xB0; snapshot at a given position for the secondary camera. The secondary camera does not need to have been set up.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>cameraPosition</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="attributes"></td>
        <td class="default"></td>
        <td class="description last">The position of the camera for the snapshot.</td>
      </tr>
      <tr>
        <td class="name"><code>cubemapOutputFormat</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> false</td>
        <td class="description last">If <code>true</code> then the snapshot is saved as a cube map image, otherwise is saved as an equirectangular image.</td>
      </tr>
      <tr>
        <td class="name"><code>notify</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> true</td>
        <td class="description last">This value is passed on through the <a href="/api-reference/namespaces/window#.stillSnapshotTaken">stillSnapshotTaken</a> signal.</td>
      </tr>
      <tr>
        <td class="name"><code>filename</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">If this parameter is not supplied, the image will be saved as &quot;hifi-snap-by-&lt;user name&gt;-YYYY-MM-DD_HH-MM-SS&quot;. If this parameter is <code>&quot;&quot;</code> then the image will be saved as &quot;.jpg&quot;. Otherwise, the image will be saved to this filename, with an appended &quot;.jpg&quot;.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".takeSecondaryCameraSnapshot"> takeSecondaryCameraSnapshot<span class="signature">(notify<span class="signature-attributes">opt</span>, filename<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Takes a still snapshot of the current view from the secondary camera that can be set up through the <a href="/api-reference/namespaces/render">Render</a> API.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>notify</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> true</td>
        <td class="description last">This value is passed on through the <a href="/api-reference/namespaces/window#.stillSnapshotTaken">stillSnapshotTaken</a> signal.</td>
      </tr>
      <tr>
        <td class="name"><code>filename</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">If this parameter is not given, the image will be saved as &quot;hifi-snap-by-&lt;user name&gt;-YYYY-MM-DD_HH-MM-SS&quot;. If this parameter is <code>&quot;&quot;</code> then the image will be saved as &quot;.jpg&quot;. Otherwise, the image will be saved to this filename, with an appended &quot;.jpg&quot;.</td>
      </tr>
    </tbody>
  </table>
  <h5 class="name" id=".takeSnapshot"> takeSnapshot<span class="signature">(notify<span class="signature-attributes">opt</span>, includeAnimated<span class="signature-attributes">opt</span>, aspectRatio<span class="signature-attributes">opt</span>, filename<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Takes a snapshot of the current Interface view from the primary camera. When a still image only is captured, <a href="/api-reference/namespaces/window#.stillSnapshotTaken">stillSnapshotTaken</a> is emitted; when a still image plus moving images are captured, <a href="/api-reference/namespaces/window#.processingGifStarted">processingGifStarted</a> and <a href="/api-reference/namespaces/window#.processingGifCompleted">processingGifCompleted</a> are emitted. The path to store the snapshots and the length of the animated GIF to capture are specified in Settings &gt; General &gt; Snapshots. If user has supplied a specific filename for the snapshot: If the user&apos;s requested filename has a suffix that&apos;s contained within SUPPORTED_IMAGE_FORMATS, DON&apos;T append &quot;.jpg&quot; to the filename. QT will save the image in the format associated with the filename&apos;s suffix. If you want lossless Snapshots, supply a `.png` filename. Otherwise, use `.jpeg` or `.jpg`. Otherwise, &quot;.jpg&quot; is appended to the user&apos;s requested filename so that the image is saved in JPG format. If the user hasn&apos;t supplied a specific filename for the snapshot: Save the snapshot in JPG format according to FILENAME_PATH_FORMAT</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>notify</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> true</td>
        <td class="description last">This value is passed on through the <a href="/api-reference/namespaces/window#.stillSnapshotTaken">stillSnapshotTaken</a> signal.</td>
      </tr>
      <tr>
        <td class="name"><code>includeAnimated</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> false</td>
        <td class="description last">If <code>true</code>, a moving image is captured as an animated GIF in addition to a still image.</td>
      </tr>
      <tr>
        <td class="name"><code>aspectRatio</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> 0</td>
        <td class="description last">The width/height ratio of the snapshot required. If the value is <code>0</code> the full resolution is used (window dimensions in desktop mode; HMD display dimensions in HMD mode), otherwise one of the dimensions is adjusted in order to match the aspect ratio.</td>
      </tr>
      <tr>
        <td class="name"><code>filename</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> &quot;&quot;</td>
        <td class="description last">If this parameter is not given, the image will be saved as &quot;hifi-snap-by-&lt;user name&gt;-YYYY-MM-DD_HH-MM-SS&quot;. If this parameter is <code>&quot;&quot;</code> then the image will be saved as &quot;.jpg&quot;. Otherwise, the image will be saved to this filename, with an appended &quot;.jpg&quot;.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Using the snapshot function and signals.</p><pre><code>function onStillSnapshotTaken(path, notify) {
  print(&quot;Still snapshot taken: &quot; + path);
  print(&quot;Notify: &quot; + notify);
}

function onProcessingGifStarted(stillPath) {
  print(&quot;Still snapshot taken: &quot; + stillPath);
}

function onProcessingGifCompleted(animatedPath) {
  print(&quot;Animated snapshot taken: &quot; + animatedPath);
}

Window.stillSnapshotTaken.connect(onStillSnapshotTaken);
Window.processingGifStarted.connect(onProcessingGifStarted);
Window.processingGifCompleted.connect(onProcessingGifCompleted);

var notify = true;
var animated = true;
var aspect = 1920 / 1080;
var filename = &quot;&quot;;
Window.takeSnapshot(notify, animated, aspect, filename);</code></pre>
  <h5 class="name" id=".updateMessageBox"> updateMessageBox<span class="signature">(id, title, text, buttons, defaultButton)</span><span class="type-signature"></span></h5>
  <div class="description"> Update the content of a message box that was opened with <a href="/api-reference/namespaces/window#.openMessageBox">openMessageBox</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>id</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The ID of the message box.</td>
      </tr>
      <tr>
        <td class="name"><code>title</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The title to display for the message box.</td>
      </tr>
      <tr>
        <td class="name"><code>text</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">Text to display in the message box.</td>
      </tr>
      <tr>
        <td class="name"><code>buttons</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/namespaces/window#.MessageBoxButton">Window.MessageBoxButton</a></span></td>
        <td class="description last">The buttons to display on the message box; one or more button values added together.</td>
      </tr>
      <tr>
        <td class="name"><code>defaultButton</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/namespaces/window#.MessageBoxButton">Window.MessageBoxButton</a></span></td>
        <td class="description last">The button that has focus when the message box is opened.</td>
      </tr>
    </tbody>
  </table>
  <h4 class="subsection-title">Signals</h4>
  <h5 class="name" id=".announcement"> announcement<span class="signature">(message)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when a message is announced by <a href="/api-reference/namespaces/window#.displayAnnouncement">displayAnnouncement</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The message text.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".assetsDirChanged"> assetsDirChanged<span class="signature">(asset)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the user chooses an asset in a <a href="/api-reference/namespaces/window#.browseAssetsAsync">browseAssetsAsync</a> dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>asset</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The path and name of the asset the user chose in the dialog.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".browseChanged"> browseChanged<span class="signature">(filename)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the user chooses a file in a <a href="/api-reference/namespaces/window#.browseAsync">browseAsync</a> dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>filename</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The path and name of the file the user chose in the dialog.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".browseDirChanged"> browseDirChanged<span class="signature">(directory)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the user chooses a directory in a <a href="/api-reference/namespaces/window#.browseDirAsync">browseDirAsync</a> dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>directory</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The directory the user chose in the dialog.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".connectionAdded"> connectionAdded<span class="signature">(message)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when you&apos;ve successfully made a user connection.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">A description of the success.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".connectionError"> connectionError<span class="signature">(message)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when you failed to make a user connection.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>message</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">A description of the error.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".domainChanged"> domainChanged<span class="signature">(domainURL)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when you change the domain you&apos;re visiting. <strong>Warning:</strong> Is not emitted if you go to a domain that isn&apos;t running.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>domainURL</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The domain&apos;s URL.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Report when you change domains.</p><pre><code>function onDomainChanged(domain) {
  print(&quot;Domain changed: &quot; + domain);
}

Window.domainChanged.connect(onDomainChanged);</code></pre>
  <h5 class="name" id=".domainConnectionRefused"> domainConnectionRefused<span class="signature">(reasonMessage, reasonCode, extraInfo)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when you try to visit a domain but are refused connection.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>reasonMessage</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">A description of the refusal.</td>
      </tr>
      <tr>
        <td class="name"><code>reasonCode</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/namespaces/window#.ConnectionRefusedReason">Window.ConnectionRefusedReason</a></span></td>
        <td class="description last">Integer number that enumerates the reason for the refusal.</td>
      </tr>
      <tr>
        <td class="name"><code>extraInfo</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">Extra information about the refusal.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".geometryChanged"> geometryChanged<span class="signature">(geometry)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the position or size of the Interface window changes.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>geometry</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Rect">Rect</a></span></td>
        <td class="description last">The position and size of the drawable area of the Interface window.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Report the position of size of the Interface window when it changes.</p><pre><code>function onWindowGeometryChanged(rect) {
  print(&quot;Window geometry: &quot; + JSON.stringify(rect));
}

Window.geometryChanged.connect(onWindowGeometryChanged);
   </code></pre>
  <h5 class="name" id=".interstitialModeChanged"> interstitialModeChanged<span class="signature">(interstitialMode)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the interstitial mode changes.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>interstitialMode</code></td>
        <td class="type"> <span class="param-type">bool</span></td>
        <td class="description last">The new interstitial mode value. If <code>true</code>, the interstitial graphics are displayed when the domain is loading.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".messageBoxClosed"> messageBoxClosed<span class="signature">(id, button)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the user closes a message box that was opened with <a href="/api-reference/namespaces/window#.openMessageBox">openMessageBox</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>id</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The ID of the message box that was closed.</td>
      </tr>
      <tr>
        <td class="name"><code>button</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The button that the user clicked. If the user presses Esc, the Cancel button value is returned, whether or not the Cancel button is displayed in the message box.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".processingGifCompleted"> processingGifCompleted<span class="signature">(pathAnimatedSnapshot)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when a GIF has been prepared of the snapshot images captured by <a href="/api-reference/namespaces/window#.takeSnapshot">takeSnapshot</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>pathAnimatedSnapshot</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The path and name of the moving snapshot GIF file.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".processingGifStarted"> processingGifStarted<span class="signature">(pathStillSnapshot)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the snapshot images have been captured by <a href="/api-reference/namespaces/window#.takeSnapshot">takeSnapshot</a> and the GIF is starting to be processed.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>pathStillSnapshot</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The path and name of the still snapshot image file.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".promptTextChanged"> promptTextChanged<span class="signature">(text)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the user OKs a <a href="/api-reference/namespaces/window#.promptAsync">promptAsync</a> dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>text</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The text the user entered in the dialog.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".redirectErrorStateChanged"> redirectErrorStateChanged<span class="signature">(isInErrorState)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when you try to visit a domain but are redirected into the error state.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>isInErrorState</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="description last">If <code>true</code>, the user has been redirected to the error URL.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".saveFileChanged"> saveFileChanged<span class="signature">(filename)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when the user specifies a file in a <a href="/api-reference/namespaces/window#.saveAsync">saveAsync</a> dialog.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>filename</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The path and name of the file that the user specified in the dialog.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".snapshot360Taken"> snapshot360Taken<span class="signature">(pathStillSnapshot, notify)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when a still 360&#xB0; snapshot has been taken by calling <a href="/api-reference/namespaces/window#.takeSecondaryCamera360Snapshot">takeSecondaryCamera360Snapshot</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>pathStillSnapshot</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The path and name of the snapshot image file.</td>
      </tr>
      <tr>
        <td class="name"><code>notify</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="description last">The value of the <code>notify</code> parameter that <a href="/api-reference/namespaces/window#.takeSecondaryCamera360Snapshot">takeSecondaryCamera360Snapshot</a> was called with.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".snapshotShared"> snapshotShared<span class="signature">(isError, reply)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when a snapshot submitted via <a href="/api-reference/namespaces/window#.shareSnapshot">shareSnapshot</a> is ready for sharing. The snapshot may then be shared via the Account.metaverseServerURL Web API.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>isError</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="description last"><code>true</code> if an error was encountered preparing the snapshot for sharing, otherwise <code>false</code>.</td>
      </tr>
      <tr>
        <td class="name"><code>reply</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">JSON-formatted information about the snapshot.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".stillSnapshotTaken"> stillSnapshotTaken<span class="signature">(pathStillSnapshot, notify)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when a still snapshot has been taken by calling <a href="/api-reference/namespaces/window#.takeSnapshot">takeSnapshot</a> with <code>includeAnimated = false</code> or <a href="/api-reference/namespaces/window#.takeSecondaryCameraSnapshot">takeSecondaryCameraSnapshot</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>pathStillSnapshot</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The path and name of the snapshot image file.</td>
      </tr>
      <tr>
        <td class="name"><code>notify</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="description last">The value of the <code>notify</code> parameter that <a href="/api-reference/namespaces/window#.takeSnapshot">takeSnapshot</a> was called with.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h5 class="name" id=".svoImportRequested"> svoImportRequested<span class="signature">(url)</span> <span class="type-signature">&#x2192; {Signal}</span></h5>
  <div class="description"> Triggered when you try to navigate to a *.json, *.svo, or *.svo.json URL in a Web browser within Interface.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>url</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="description last">The URL of the file to import.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <dl><dt> Type: Signal</dt></dl>
  <h4 class="subsection-title">Type Definitions</h4>
  <h5 class="name" id=".ConnectionRefusedReason">ConnectionRefusedReason</h5>
  <div class="description">
    <p>The reasons that you may be refused connection to a domain are defined by numeric values:</p>
    <table>
      <thead>
        <tr>
          <th>Reason</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><strong>Unknown</strong></td>
          <td><code>0</code></td>
          <td>Some unknown reason.</td>
        </tr>
        <tr>
          <td><strong>ProtocolMismatch</strong></td>
          <td><code>1</code></td>
          <td>The communications protocols of the domain and your Interface are not the same.</td>
        </tr>
        <tr>
          <td><strong>LoginError</strong></td>
          <td><code>2</code></td>
          <td>You could not be logged into the domain.</td>
        </tr>
        <tr>
          <td><strong>NotAuthorized</strong></td>
          <td><code>3</code></td>
          <td>You are not authorized to connect to the domain.</td>
        </tr>
        <tr>
          <td><strong>TooManyUsers</strong></td>
          <td><code>4</code></td>
          <td>The domain already has its maximum number of users.</td>
        </tr>
        <tr>
          <td><strong>TimedOut</strong></td>
          <td><code>5</code></td>
          <td>Connecting to the domain timed out.</td>
        </tr>
      </tbody>
    </table>
  </div>
  <dl><dt>Type: <span class="param-type">number</span></dl></dt>
  <h5 class="name" id=".DisplayTexture">DisplayTexture</h5>
  <div class="description">
    <p>The views that may be displayed on the PC display.</p>
    <table>
      <thead>
        <tr>
          <th>Value</th>
          <th>View Displayed</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><code>&quot;&quot;</code></td>
          <td>Normal view.</td>
        </tr>
        <tr>
          <td><code>&quot;resource://spectatorCameraFrame&quot;</code></td>
          <td>Entity camera view.</td>
        </tr>
      </tbody>
    </table>
  </div>
  <dl><dt>Type: <span class="param-type">string</span></dl></dt>
  <h5 class="name" id=".MessageBoxButton">MessageBoxButton</h5>
  <div class="description">
    <p>The buttons that may be included in a message box created by <a href="/api-reference/namespaces/window#.openMessageBox">openMessageBox</a> are defined by numeric values:</p>
    <table>
      <thead>
        <tr>
          <th>Button</th>
          <th>Value</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><strong>NoButton</strong></td>
          <td><code>0x0</code></td>
          <td>An invalid button.</td>
        </tr>
        <tr>
          <td><strong>Ok</strong></td>
          <td><code>0x400</code></td>
          <td>&quot;OK&quot;</td>
        </tr>
        <tr>
          <td><strong>Save</strong></td>
          <td><code>0x800</code></td>
          <td>&quot;Save&quot;</td>
        </tr>
        <tr>
          <td><strong>SaveAll</strong></td>
          <td><code>0x1000</code></td>
          <td>&quot;Save All&quot;</td>
        </tr>
        <tr>
          <td><strong>Open</strong></td>
          <td><code>0x2000</code></td>
          <td>&quot;Open&quot;</td>
        </tr>
        <tr>
          <td><strong>Yes</strong></td>
          <td><code>0x4000</code></td>
          <td>&quot;Yes&quot;</td>
        </tr>
        <tr>
          <td><strong>YesToAll</strong></td>
          <td><code>0x8000</code></td>
          <td>&quot;Yes to All&quot;</td>
        </tr>
        <tr>
          <td><strong>No</strong></td>
          <td><code>0x10000</code></td>
          <td>&quot;No&quot;</td>
        </tr>
        <tr>
          <td><strong>NoToAll</strong></td>
          <td><code>0x20000</code></td>
          <td>&quot;No to All&quot;</td>
        </tr>
        <tr>
          <td><strong>Abort</strong></td>
          <td><code>0x40000</code></td>
          <td>&quot;Abort&quot;</td>
        </tr>
        <tr>
          <td><strong>Retry</strong></td>
          <td><code>0x80000</code></td>
          <td>&quot;Retry&quot;</td>
        </tr>
        <tr>
          <td><strong>Ignore</strong></td>
          <td><code>0x100000</code></td>
          <td>&quot;Ignore&quot;</td>
        </tr>
        <tr>
          <td><strong>Close</strong></td>
          <td><code>0x200000</code></td>
          <td>&quot;Close&quot;</td>
        </tr>
        <tr>
          <td><strong>Cancel</strong></td>
          <td><code>0x400000</code></td>
          <td>&quot;Cancel&quot;</td>
        </tr>
        <tr>
          <td><strong>Discard</strong></td>
          <td><code>0x800000</code></td>
          <td>&quot;Discard&quot; or &quot;Don&apos;t Save&quot;</td>
        </tr>
        <tr>
          <td><strong>Help</strong></td>
          <td><code>0x1000000</code></td>
          <td>&quot;Help&quot;</td>
        </tr>
        <tr>
          <td><strong>Apply</strong></td>
          <td><code>0x2000000</code></td>
          <td>&quot;Apply&quot;</td>
        </tr>
        <tr>
          <td><strong>Reset</strong></td>
          <td><code>0x4000000</code></td>
          <td>&quot;Reset&quot;</td>
        </tr>
        <tr>
          <td><strong>RestoreDefaults</strong></td>
          <td><code>0x8000000</code></td>
          <td>&quot;Restore Defaults&quot;</td>
        </tr>
      </tbody>
    </table>
  </div>
  <dl><dt>Type: <span class="param-type">number</span></dl></dt>
</article>
</section>
              </div>
          </div>
      {% endblock %}