      {% extends 'partials/base_noGit.html.twig' %}
      {% set tags = page.taxonomy.tag %}
      {% if tags %}
          {% set progress = page.collection({'items':{'@taxonomy':{'category': 'docs', 'tag': tags}},'order': {'by': 'default', 'dir': 'asc'}}) %}
      {% else %}
          {% set progress = page.collection({'items':{'@taxonomy':{'category': 'docs'}},'order': {'by': 'default', 'dir': 'asc'}}) %}
      {% endif %}
      
      {% block navigation %}
          <div id="navigation">
          {% if not progress.isFirst(page.path) %}
              <a class="nav nav-prev" href="{{ progress.nextSibling(page.path).url }}"> <img src="{{ url('theme://images/left-arrow.png') }}"></a>
          {% endif %}
      
          {% if not progress.isLast(page.path) %}
              <a class="nav nav-next" href="{{ progress.prevSibling(page.path).url }}"><img src="{{ url('theme://images/right-arrow.png') }}"></a>
          {% endif %}
          </div>
      {% endblock %}
      
      {% block content %}
          <div id="api-specific">
              <div id="body-inner">
                  <h1>{{ page.title }}</h1>
                  <section>
<article>
  <div class="container-overview">
    <div class="description">
      <table>
        <tbody>
          <tr>
            <th>Available in:</th>
            <td>Interface Scripts</td>
            <td>Client Entity Scripts</td>
            <td>Server Entity Scripts</td>
            <td>Assignment Client Scripts</td>
          </tr>
        </tbody>
      </table><br>The Quat API provides facilities for generating and manipulating quaternions. Quaternions should be used in preference to Euler angles wherever possible because quaternions don&apos;t suffer from the problem of gimbal lock.
    </div>
    <div>
      <h5>Methods</h5>
    </div>
    <div><a href="#.angle">angle</a></div>
    <div><a href="#.angleAxis">angleAxis</a></div>
    <div><a href="#.axis">axis</a></div>
    <div><a href="#.cancelOutRoll">cancelOutRoll</a></div>
    <div><a href="#.cancelOutRollAndPitch">cancelOutRollAndPitch</a></div>
    <div><a href="#.conjugate">conjugate</a></div>
    <div><a href="#.dot">dot</a></div>
    <div><a href="#.equal">equal</a></div>
    <div><a href="#.fromPitchYawRollDegrees">fromPitchYawRollDegrees</a></div>
    <div><a href="#.fromPitchYawRollRadians">fromPitchYawRollRadians</a></div>
    <div><a href="#.fromVec3Degrees">fromVec3Degrees</a></div>
    <div><a href="#.fromVec3Radians">fromVec3Radians</a></div>
    <div><a href="#.getForward">getForward</a></div>
    <div><a href="#.getFront">getFront</a></div>
    <div><a href="#.getRight">getRight</a></div>
    <div><a href="#.getUp">getUp</a></div>
    <div><a href="#.inverse">inverse</a></div>
    <div><a href="#.lookAt">lookAt</a></div>
    <div><a href="#.lookAtSimple">lookAtSimple</a></div>
    <div><a href="#.mix">mix</a></div>
    <div><a href="#.multiply">multiply</a></div>
    <div><a href="#.normalize">normalize</a></div>
    <div><a href="#.print">print</a></div>
    <div><a href="#.rotationBetween">rotationBetween</a></div>
    <div><a href="#.safeEulerAngles">safeEulerAngles</a></div>
    <div><a href="#.slerp">slerp</a></div>
    <div><a href="#.squad">squad</a></div><br>
    <h5 class="subsection-title">Properties:</h5>
    <table class="props">
      <thead>
        <tr>
          <th>Name</th>
          <th>Type</th>
          <th class="last">Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td class="name"><code>IDENTITY</code></td>
          <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
          <td class="description last"><code>{ x: 0, y: 0, z: 0, w: 1 }</code> : The identity rotation, i.e., no rotation. <em>Read-only.</em></td>
        </tr>
      </tbody>
    </table>
    <h3>Example</h3>
    <p class="code-caption">Print the <code>IDENTITY</code> value.</p><pre><code>print(JSON.stringify(Quat.IDENTITY)); // { x: 0, y: 0, z: 0, w: 1 }
print(JSON.stringify(Quat.safeEulerAngles(Quat.IDENTITY))); // { x: 0, y: 0, z: 0 }</code></pre>
  </div>
  <h4 class="subsection-title">Methods</h4>
  <h5 class="name" id=".angle"> angle<span class="signature">(q)</span> <span class="type-signature">&#x2192; {number}</span></h5>
  <div class="description"> Get the rotation angle for a quaternion.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The quaternion.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The rotation angle for <code>q</code>, in radians. <strong>WARNING:</strong> This value is in radians whereas the value used by <a href="/api-reference/namespaces/quat#.angleAxis">Quat.angleAxis</a> is in degrees.</div>
  <dl><dt> Type: number</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Get the rotation angle of a quaternion.</p><pre><code>var forward = Quat.getForward(Camera.orientation);
var rotation = Quat.angleAxis(90, forward);
var angle = Quat.angle(rotation);
print(&quot;Angle: &quot; + angle * 180 / Math.PI);  // 90 degrees.</code></pre>
  <h5 class="name" id=".angleAxis"> angleAxis<span class="signature">(angle, axis)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Generate a quaternion given an angle to rotate through and an axis to rotate about.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>angle</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The angle to rotate through, in degrees.</td>
      </tr>
      <tr>
        <td class="name"><code>axis</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The unit axis to rotate about.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A quaternion that is a rotation through <code>angle</code> degrees about the <code>axis</code>. <strong>WARNING:</strong> This value is in degrees whereas the value returned by <a href="/api-reference/namespaces/quat#.angle">Quat.angle</a> is in radians.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Calculate a rotation of 90 degrees about the direction your camera is looking.</p><pre><code>var rotation = Quat.angleAxis(90, Quat.getForward(Camera.orientation));</code></pre>
  <h5 class="name" id=".axis"> axis<span class="signature">(q)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Vec3">Vec3</a>}</span></h5>
  <div class="description"> Get the rotation axis for a quaternion.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The quaternion.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The normalized rotation axis for <code>q</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Vec3">Vec3</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Get the rotation axis of a quaternion.</p><pre><code>var forward = Quat.getForward(Camera.orientation);
var rotation = Quat.angleAxis(90, forward);
var axis = Quat.axis(rotation);
print(&quot;Forward: &quot; + JSON.stringify(forward));
print(&quot;Axis: &quot; + JSON.stringify(axis)); // Same value as forward.</code></pre>
  <h5 class="name" id=".cancelOutRoll"> cancelOutRoll<span class="signature">(orientation)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Cancels out the roll component of a quaternion so that its horizontal axis is level.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>orientation</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">A quaternion representing an orientation.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>orientation</code> with its roll canceled out.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Two ways of calculating a camera orientation that points in the direction of a given quaternion but keeps the camera&apos;s horizontal axis level.</p><pre><code>var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);

var noRoll = Quat.cancelOutRoll(quaternion);
Quat.print(&quot;&quot;, noRoll, true); // dvec3(-1.033004, 22.245996, -0.000000)

var front = Quat.getFront(quaternion);
var lookAt = Quat.lookAtSimple(Vec3.ZERO, front);
Quat.print(&quot;&quot;, lookAt, true); // dvec3(-1.033004, 22.245996, -0.000000)
  </code></pre>
  <h5 class="name" id=".cancelOutRollAndPitch"> cancelOutRollAndPitch<span class="signature">(orientation)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Cancels out the roll and pitch component of a quaternion so that its completely horizontal with a yaw pointing in the given quaternion&apos;s direction.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>orientation</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">A quaternion representing an orientation.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>orientation</code> with its roll and pitch canceled out.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Two ways of calculating a camera orientation in the x-z plane with a yaw pointing in the direction of a given quaternion.</p><pre><code>var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);

var noRollOrPitch = Quat.cancelOutRollAndPitch(quaternion);
Quat.print(&quot;&quot;, noRollOrPitch, true); // dvec3(0.000000, 22.245995, 0.000000)

var front = Quat.getFront(quaternion);
var lookAt = Quat.lookAtSimple(Vec3.ZERO, { x: front.x, y: 0, z: front.z });
Quat.print(&quot;&quot;, lookAt, true); // dvec3(0.000000, 22.245996, 0.000000)</code></pre>
  <h5 class="name" id=".conjugate"> conjugate<span class="signature">(q)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Calculate the conjugate of a quaternion. For a unit quaternion, its conjugate is the same as its <a href="/api-reference/namespaces/quat#.inverse">Quat.inverse</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The quaternion to conjugate.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The conjugate of <code>q</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">A unit quaternion multiplied by its conjugate is a zero rotation.</p><pre><code>var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);
Quat.print(&quot;quaternion&quot;, quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)
var conjugate = Quat.conjugate(quaternion);
Quat.print(&quot;conjugate&quot;, conjugate, true); // dvec3(1.116056, -22.242186, -28.451778)
var identity = Quat.multiply(conjugate, quaternion);
Quat.print(&quot;identity&quot;, identity, true); // dvec3(0.000000, 0.000000, 0.000000)</code></pre>
  <h5 class="name" id=".dot"> dot<span class="signature">(q1, q2)</span> <span class="type-signature">&#x2192; {number}</span></h5>
  <div class="description"> Calculate the dot product of two quaternions. The closer the quaternions are to each other the more non-zero the value is (either positive or negative). Identical unit rotations have a dot product of +/- 1.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The first quaternion.</td>
      </tr>
      <tr>
        <td class="name"><code>q2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The second quaternion.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The dot product of <code>q1</code> and <code>q2</code>.</div>
  <dl><dt> Type: number</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Testing unit quaternions for equality.</p><pre><code>var q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);
var q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);
print(Quat.equal(q1, q2)); // true
var q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);
print(Quat.equal(q1, q3)); // false

var dot = Quat.dot(q1, q3);
print(dot); // -0.9999999403953552
var equal = Math.abs(1 - Math.abs(dot)) &lt; 0.000001;
print(equal); // true</code></pre>
  <h5 class="name" id=".equal"> equal<span class="signature">(q1, q2)</span> <span class="type-signature">&#x2192; {boolean}</span></h5>
  <div class="description"> Test whether two quaternions are equal. <strong>Note:</strong> The quaternions must be exactly equal in order for <code>true</code> to be returned; it is often better to use <a href="/api-reference/namespaces/quat#.dot">Quat.dot</a> and test for closeness to +/-1.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The first quaternion.</td>
      </tr>
      <tr>
        <td class="name"><code>q2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The second quaternion.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>true</code> if the quaternions are equal, otherwise <code>false</code>.</div>
  <dl><dt> Type: boolean</dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Testing unit quaternions for equality.</p><pre><code>var q1 = Quat.fromPitchYawRollDegrees(0, 0, 0);
var q2 = Quat.fromPitchYawRollDegrees(0, 0, 0);
print(Quat.equal(q1, q2)); // true
var q3 = Quat.fromPitchYawRollDegrees(0, 0, 359.95);
print(Quat.equal(q1, q3)); // false

var dot = Quat.dot(q1, q3);
print(dot); // -0.9999999403953552
var equal = Math.abs(1 - Math.abs(dot)) &lt; 0.000001;
print(equal); // true</code></pre>
  <h5 class="name" id=".fromPitchYawRollDegrees"> fromPitchYawRollDegrees<span class="signature">(pitch, yaw, roll)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Generate a quaternion from pitch, yaw, and roll values in degrees.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>pitch</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The pitch angle in degrees.</td>
      </tr>
      <tr>
        <td class="name"><code>yaw</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The yaw angle in degrees.</td>
      </tr>
      <tr>
        <td class="name"><code>roll</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The roll angle in degrees.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A quaternion created using the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Create a rotation of 180 degrees about the y axis.</p><pre><code>var rotation = Quat.fromPitchYawRollDgrees(0, 180, 0 );</code></pre>
  <h5 class="name" id=".fromPitchYawRollRadians"> fromPitchYawRollRadians<span class="signature">(pitch, yaw, roll)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Generate a quaternion from pitch, yaw, and roll values in radians.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>pitch</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The pitch angle in radians.</td>
      </tr>
      <tr>
        <td class="name"><code>yaw</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The yaw angle in radians.</td>
      </tr>
      <tr>
        <td class="name"><code>roll</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The roll angle in radians.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A quaternion created from the <code>pitch</code>, <code>yaw</code>, and <code>roll</code> Euler angles.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Create a rotation of 180 degrees about the y axis.</p><pre><code>var rotation = Quat.fromPitchYawRollRadians(0, Math.PI, 0);</code></pre>
  <h5 class="name" id=".fromVec3Degrees"> fromVec3Degrees<span class="signature">(vector)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Generate a quaternion from a <a href="/api-reference/globals#Vec3">Vec3</a> of Euler angles in degrees.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>vector</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">A vector of three Euler angles in degrees, the angles being the rotations about the x, y, and z axes.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A quaternion created from the Euler angles in <code>vector</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Zero out pitch and roll from an orientation.</p><pre><code>var eulerAngles = Quat.safeEulerAngles(orientation);
eulerAngles.x = 0;
eulerAngles.z = 0;
var newOrientation = Quat.fromVec3Degrees(eulerAngles);</code></pre>
  <h5 class="name" id=".fromVec3Radians"> fromVec3Radians<span class="signature">(vector)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Generate a quaternion from a <a href="/api-reference/globals#Vec3">Vec3</a> of Euler angles in radians.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>vector</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">A vector of three Euler angles in radians, the angles being the rotations about the x, y, and z axes.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A quaternion created using the Euler angles in <code>vector</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Create a rotation of 180 degrees about the y axis.</p><pre><code>var rotation = Quat.fromVec3Radians({ x: 0, y: Math.PI, z: 0 });</code></pre>
  <h5 class="name" id=".getForward"> getForward<span class="signature">(orientation)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Vec3">Vec3</a>}</span></h5>
  <div class="description"> Get the &quot;forward&quot; direction that the camera would face if its orientation was set to the quaternion value. This is a synonym for <a href="/api-reference/namespaces/quat#.getFront">Quat.getFront</a>. The High Fidelity camera has axes x = right, y = up, -z = forward.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>orientation</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">A quaternion representing an orientation.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The negative z-axis rotated by <code>orientation</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Vec3">Vec3</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Demonstrate that the &quot;forward&quot; vector is for the negative z-axis.</p><pre><code>var forward = Quat.getForward(Quat.IDENTITY);
print(JSON.stringify(forward)); // {&quot;x&quot;:0,&quot;y&quot;:0,&quot;z&quot;:-1}</code></pre>
  <h5 class="name" id=".getFront"> getFront<span class="signature">(orientation)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Vec3">Vec3</a>}</span></h5>
  <div class="description"> Get the &quot;front&quot; direction that the camera would face if its orientation was set to the quaternion value. This is a synonym for <a href="/api-reference/namespaces/quat#.getForward">Quat.getForward</a>. The High Fidelity camera has axes x = right, y = up, -z = forward.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>orientation</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">A quaternion representing an orientation.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The negative z-axis rotated by <code>orientation</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Vec3">Vec3</a></dt></dl>
  <h5 class="name" id=".getRight"> getRight<span class="signature">(orientation)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Vec3">Vec3</a>}</span></h5>
  <div class="description"> Get the &quot;right&quot; direction that the camera would have if its orientation was set to the quaternion value. The High Fidelity camera has axes x = right, y = up, -z = forward.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>orientation</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">A quaternion representing an orientation.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The x-axis rotated by <code>orientation</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Vec3">Vec3</a></dt></dl>
  <h5 class="name" id=".getUp"> getUp<span class="signature">(orientation)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Vec3">Vec3</a>}</span></h5>
  <div class="description"> Get the &quot;up&quot; direction that the camera would have if its orientation was set to the quaternion value. The High Fidelity camera has axes x = right, y = up, -z = forward.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>orientation</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">A quaternion representing an orientation.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The y-axis rotated by <code>orientation</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Vec3">Vec3</a></dt></dl>
  <h5 class="name" id=".inverse"> inverse<span class="signature">(q)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Calculate the inverse of a quaternion. For a unit quaternion, its inverse is the same as its <a href="/api-reference/namespaces/quat#.conjugate">Quat.conjugate</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The quaternion.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The inverse of <code>q</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">A quaternion multiplied by its inverse is a zero rotation.</p><pre><code>var quaternion = Quat.fromPitchYawRollDegrees(10, 20, 30);
Quat.print(&quot;quaternion&quot;, quaternion, true); // dvec3(10.000000, 20.000004, 30.000004)
var inverse = Quat.invserse(quaternion);
Quat.print(&quot;inverse&quot;, inverse, true); // dvec3(1.116056, -22.242186, -28.451778)
var identity = Quat.multiply(inverse, quaternion);
Quat.print(&quot;identity&quot;, identity, true); // dvec3(0.000000, 0.000000, 0.000000)</code></pre>
  <h5 class="name" id=".lookAt"> lookAt<span class="signature">(eye, target, up)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Calculate a camera orientation given eye position, point of interest, and &quot;up&quot; direction. The camera&apos;s negative z-axis is the forward direction. The result has zero roll about its forward direction with respect to the given &quot;up&quot; direction.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>eye</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The eye position.</td>
      </tr>
      <tr>
        <td class="name"><code>target</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The point to look at.</td>
      </tr>
      <tr>
        <td class="name"><code>up</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The &quot;up&quot; direction.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to be the cross product of the eye-to-target and up vectors.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Rotate your view in independent mode to look at the world origin upside down.</p><pre><code>Camera.mode = &quot;independent&quot;;
Camera.orientation = Quat.lookAt(Camera.position, Vec3.ZERO, Vec3.UNIT_NEG_Y);</code></pre>
  <h5 class="name" id=".lookAtSimple"> lookAtSimple<span class="signature">(eye, target)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Calculate a camera orientation given eye position and point of interest. The camera&apos;s negative z-axis is the forward direction. The result has zero roll about its forward direction.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>eye</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The eye position.</td>
      </tr>
      <tr>
        <td class="name"><code>target</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The point to look at.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A quaternion that orients the negative z-axis to point along the eye-to-target vector and the x-axis to be the cross product of the eye-to-target and an &quot;up&quot; vector. The &quot;up&quot; vector is the y-axis unless the eye-to-target vector is nearly aligned with it (i.e., looking near vertically up or down), in which case the x-axis is used as the &quot;up&quot; vector.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Rotate your view in independent mode to look at the world origin.</p><pre><code>Camera.mode = &quot;independent&quot;;
Camera.orientation = Quat.lookAtSimple(Camera.position, Vec3.ZERO);</code></pre>
  <h5 class="name" id=".mix"> mix<span class="signature">(q1, q2, alpha)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Compute a spherical linear interpolation between two rotations, safely handling two rotations that are very similar. See also, <a href="/api-reference/namespaces/quat#.slerp">Quat.slerp</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The beginning rotation.</td>
      </tr>
      <tr>
        <td class="name"><code>q2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The ending rotation.</td>
      </tr>
      <tr>
        <td class="name"><code>alpha</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion of <code>q2</code>&apos;s value to return in favor of <code>q1</code>&apos;s value. A value of <code>0.0</code> returns <code>q1</code>&apos;s value; <code>1.0</code> returns <code>q2s</code>&apos;s value.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Animate between one rotation and another.</p><pre><code>var dt = amountOfTimeThatHasPassed;
var mixFactor = amountOfTimeThatHasPassed / TIME_TO_COMPLETE;
if (mixFactor &gt; 1) {
  mixFactor = 1;
}
var newRotation = Quat.mix(startRotation, endRotation, mixFactor);</code></pre>
  <h5 class="name" id=".multiply"> multiply<span class="signature">(q1, q2)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Multiply two quaternions.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The first quaternion.</td>
      </tr>
      <tr>
        <td class="name"><code>q2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The second quaternion.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>q1</code> multiplied with <code>q2</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Calculate the orientation of your avatar&apos;s right hand in world coordinates.</p><pre><code>var handController = Controller.Standard.RightHand;
var handPose = Controller.getPoseValue(handController);
if (handPose.valid) {
  var handOrientation = Quat.multiply(MyAvatar.orientation, handPose.rotation);
}</code></pre>
  <h5 class="name" id=".normalize"> normalize<span class="signature">(q)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Normalizes a quaternion.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The quaternion to normalize.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> <code>q</code> normalized to have unit length.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Normalize a repeated delta rotation so that maths rounding errors don&apos;t accumulate.</p><pre><code>var deltaRotation = Quat.fromPitchYawRollDegrees(0, 0.1, 0);
var currentRotation = Quat.ZERO;
while (Quat.safeEulerAngles(currentRotation).y &lt; 180) {
  currentRotation = Quat.multiply(deltaRotation, currentRotation);
  currentRotation = Quat.normalize(currentRotation);
  // Use currentRotatation for something.
}</code></pre>
  <h5 class="name" id=".print"> print<span class="signature">(label, q, asDegrees<span class="signature-attributes">opt</span>)</span><span class="type-signature"></span></h5>
  <div class="description"> Print to the program log a text label followed by a quaternion&apos;s pitch, yaw, and roll Euler angles.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th>Attributes</th>
        <th>Default</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>label</code></td>
        <td class="type"> <span class="param-type">string</span></td>
        <td class="attributes"></td>
        <td class="default"></td>
        <td class="description last">The label to print.</td>
      </tr>
      <tr>
        <td class="name"><code>q</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="attributes"></td>
        <td class="default"></td>
        <td class="description last">The quaternion to print.</td>
      </tr>
      <tr>
        <td class="name"><code>asDegrees</code></td>
        <td class="type"> <span class="param-type">boolean</span></td>
        <td class="attributes"> &lt;optional&gt;<br></td>
        <td class="default"> false</td>
        <td class="description last">If <code>true</code> the angle values are printed in degrees, otherwise they are printed in radians.</td>
      </tr>
    </tbody>
  </table>
  <h5>Example</h5>
  <p class="code-caption">Two ways of printing a label plus a quaternion&apos;s Euler angles.</p><pre><code>var quaternion = Quat.fromPitchYawRollDegrees(0, 45, 0);

// Quaternion: dvec3(0.000000, 45.000004, 0.000000)
Quat.print(&quot;Quaternion:&quot;, quaternion,  true);

// Quaternion: {&quot;x&quot;:0,&quot;y&quot;:45.000003814697266,&quot;z&quot;:0}
print(&quot;Quaternion: &quot; + JSON.stringify(Quat.safeEulerAngles(quaternion)));</code></pre>
  <h5 class="name" id=".rotationBetween"> rotationBetween<span class="signature">(v1, v2)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Calculate the shortest rotation from a first vector onto a second.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>v1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The first vector.</td>
      </tr>
      <tr>
        <td class="name"><code>v2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Vec3">Vec3</a></span></td>
        <td class="description last">The second vector.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> The rotation from <code>v1</code> onto <code>v2</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Apply a change in velocity to an entity and rotate it to face the direction it&apos;s travelling.</p><pre><code>var newVelocity = Vec3.sum(entityVelocity, deltaVelocity);
var properties = { velocity: newVelocity };
if (Vec3.length(newVelocity) &gt; 0.001) {
  properties.rotation = Quat.rotationBetween(entityVelocity, newVelocity);
}
Entities.editEntity(entityID, properties);
entityVelocity = newVelocity;</code></pre>
  <h5 class="name" id=".safeEulerAngles"> safeEulerAngles<span class="signature">(orientation)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Vec3">Vec3</a>}</span></h5>
  <div class="description"> Calculate the Euler angles for the quaternion, in degrees. (The &quot;safe&quot; in the name signifies that the angle results will not be garbage even when the rotation is particularly difficult to decompose with pitches around +/-90 degrees.)</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>orientation</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">A quaternion representing an orientation.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A <a href="/api-reference/globals#Vec3">Vec3</a> of Euler angles for the <code>orientation</code>, in degrees, the angles being the rotations about the x, y, and z axes.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Vec3">Vec3</a></dt></dl>
  <h5>Example</h5>
  <p class="code-caption">Report the camera yaw.</p><pre><code>var eulerAngles = Quat.safeEulerAngles(Camera.orientation);
print(&quot;Camera yaw: &quot; + eulerAngles.y);</code></pre>
  <h5 class="name" id=".slerp"> slerp<span class="signature">(q1, q2, alpha)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Compute a spherical linear interpolation between two rotations, for rotations that are not very similar. See also, <a href="/api-reference/namespaces/quat#.mix">Quat.mix</a>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The beginning rotation.</td>
      </tr>
      <tr>
        <td class="name"><code>q2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">The ending rotation.</td>
      </tr>
      <tr>
        <td class="name"><code>alpha</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The mixture coefficient between <code>0.0</code> and <code>1.0</code>. Specifies the proportion of <code>q2</code>&apos;s value to return in favor of <code>q1</code>&apos;s value. A value of <code>0.0</code> returns <code>q1</code>&apos;s value; <code>1.0</code> returns <code>q2s</code>&apos;s value.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A spherical linear interpolation between rotations <code>q1</code> and <code>q2</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
  <h5 class="name" id=".squad"> squad<span class="signature">(q1, q2, s1, s2, alpha)</span> <span class="type-signature">&#x2192; {<a href="/api-reference/globals#Quat">Quat</a>}</span></h5>
  <div class="description"> Compute a spherical quadrangle interpolation between two rotations along a path oriented toward two other rotations. Equivalent to: <code>Quat.slerp(Quat.slerp(q1, q2, alpha), Quat.slerp(s1, s2, alpha), 2 * alpha * (1.0 - alpha))</code>.</div>
  <h5>Parameters:</h5>
  <table class="params">
    <thead>
      <tr>
        <th>Name</th>
        <th>Type</th>
        <th class="last">Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td class="name"><code>q1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">Initial rotation.</td>
      </tr>
      <tr>
        <td class="name"><code>q2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">Final rotation.</td>
      </tr>
      <tr>
        <td class="name"><code>s1</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">First control point.</td>
      </tr>
      <tr>
        <td class="name"><code>s2</code></td>
        <td class="type"> <span class="param-type"><a href="/api-reference/globals#Quat">Quat</a></span></td>
        <td class="description last">Second control point.</td>
      </tr>
      <tr>
        <td class="name"><code>alpha</code></td>
        <td class="type"> <span class="param-type">number</span></td>
        <td class="description last">The mixture coefficient between <code>0.0</code> and <code>1.0</code>. A value of <code>0.0</code> returns <code>q1</code>&apos;s value; <code>1.0</code> returns <code>q2s</code>&apos;s value.</td>
      </tr>
    </tbody>
  </table>
  <h6>Returns:</h6>
  <div class="param-desc"> A spherical quadrangle interpolation between rotations <code>q1</code> and <code>q2</code> using control points <code>s1</code> and <code>s2</code>.</div>
  <dl><dt> Type: <a href="/api-reference/globals#Quat">Quat</a></dt></dl>
</article>
</section>
              </div>
          </div>
      {% endblock %}